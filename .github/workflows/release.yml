name: Go Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential libxxf86vm-dev jq

      - name: Build binary for Linux
        run: |
          GOOS=linux GOARCH=amd64 go build -o unrpa-linux-amd64 .

      #      - name: Build binary for Windows
      #        run: |
      #          GOOS=windows GOARCH=amd64 go build -o unrpa-windows-amd64.exe .

      # Use a single action for creating the release and uploading assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            unrpa-linux-amd64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.1
        with:
          node-version: '22'

#      - name: Cache Node.js modules
#        uses: actions/cache@v2
#        with:
#          # npm cache files are stored in `~/.npm` on Linux/macOS
#          path: ~/.npm
#          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.OS }}-node-
#            ${{ runner.OS }}-

      - name: Install Dependencies
        run: |
          cd unrpapp
          npm install
          npm run build

      - name: Checkout the repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update resources.json
        run: |

          GIT_TAG=$(git describe --tags)
          GIT_SHORT_HASH=$(git rev-parse --short HEAD)
          NEW_TAG="${GIT_TAG}-${GIT_SHORT_HASH}"

          # Configure git
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # create tmp branch in current position
          TMP_BRANCH_NAME=${{ github.ref_name }}-$(date +%s)$RANDOM
          git checkout -b ${TMP_BRANCH_NAME}
          # Commit
          rm -r .github
          git add -A .github
          git commit -m 'Remove github workflows which require additional permission'

          # merge current state with prepared gh-pages-base
          GH_PAGES_BASE=gh-pages-base
          GH_PAGES=gh-pages

          echo $GH_PAGES_BASE
          echo $GH_PAGES

          git fetch --all
          git checkout ${GH_PAGES_BASE}
          git merge --no-ff ${TMP_BRANCH_NAME}

          GOOS=js GOARCH=wasm go build -o wasm/unrpa.wasm wasm/main.go

          npm install
          npm run build
          
          
          cp wasm/unrpa.wasm build
          
          FIND_PATTERN="ITWILLBEREPLACEDWITHVERSION"
          find ./build -type f -exec sed -i "s/$FIND_PATTERN/$NEW_TAG/g" {};

          # Prepare the download URL
          LINUX_EXE="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/unrpa-linux-amd64"

          ## Update resources.json
          #echo "{\"linux_exe\": \"${LINUX_EXE}\"}"
          #echo "{\"linux_exe\": \"${LINUX_EXE}\"}" > resources.json

          #sed -i "s/ITWILLBEREPLACEDWITHVERSION/$NEW_TAG/g" index.html
          
          ## Commit and push changes
          #git add resources.json
          #git add wasm/unrpa.wasm
          #mv build/ docs/
          #git add docs/
          #git commit -m 'Update resources.json with latest release URLs and add JS files'

          ## override gh_pages every time as it has unneeded bins
          #git checkout -b ${GH_PAGES}
          #git push -f origin ${GH_PAGES}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Publish current workdir (which contains generated content) to GitHub Pages
        uses: rayluo/github-pages-overwriter@v1.3

        with:

          # Optional. Default value "." means the root directory of your project will be published.
          # You can use whatever directory your project uses, for example "wwwroot".
          # Such a directory does *not* have to already exist in your repo,
          # it could be an output directory created dynamically by your static website builder.
          source-directory: build

          # Optional. Default value "gh-pages".
          # It specifies the temporary branch which hosts the static website.
          # Each build will OVERWRITE this branch.
          target-branch: gh-pages

